services:
  inventory-db:
    build:
      context: ./docker/inventory_db
      dockerfile: Dockerfile
    image: inventory-database
    container_name: inventory-database
    environment:
      INVENTORY_DB_HOST: ${INVENTORY_DB_HOST}
      INVENTORY_DB_PORT: ${INVENTORY_DB_PORT}
      INVENTORY_DB_USER: ${INVENTORY_DB_USER}
      INVENTORY_DB_PASSWORD: ${INVENTORY_DB_PASSWORD}
      INVENTORY_DB_NAME: ${INVENTORY_DB_NAME}
    ports:
      - "5432"
    volumes:
      - inventory_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${INVENTORY_DB_USER} -d ${INVENTORY_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network  
    restart: unless-stopped

  billing-db:
    build:
      context: ./docker/billing_db
      dockerfile: Dockerfile
    image: billing-database
    container_name: billing-database
    environment:
      BILLING_DB_HOST: ${BILLING_DB_HOST}
      BILLING_DB_PORT: ${BILLING_DB_PORT}
      BILLING_DB_USER: ${BILLING_DB_USER}
      BILLING_DB_PASSWORD: ${BILLING_DB_PASSWORD}
      BILLING_DB_NAME: ${BILLING_DB_NAME}
    ports:
      - "5432"
    volumes:
      - billing_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${BILLING_DB_USER} -d ${BILLING_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network  
    restart: unless-stopped

  rabbitmq:
    build:
      context: ./docker/rabbitmq
      dockerfile: Dockerfile
    image: rabbitmq-server
    container_name: rabbitmq-queue
    environment:
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_QUEUE_NAME=${RABBITMQ_QUEUE_NAME}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      start_period: 5s
      retries: 3
    networks:
      - app-network  
    restart: unless-stopped

  inventory-app:
    build:
      context: ./inventory-app
      dockerfile: Dockerfile
    image: inventory-app
    container_name: inventory-app
    ports:
      - "8080:8080"
    environment:
      INVENTORY_DB_HOST: ${INVENTORY_DB_HOST}
      INVENTORY_DB_PORT: ${INVENTORY_DB_PORT}
      INVENTORY_DB_USER: ${INVENTORY_DB_USER}
      INVENTORY_DB_PASSWORD: ${INVENTORY_DB_PASSWORD}
      INVENTORY_DB_NAME: ${INVENTORY_DB_NAME}
      INVENTORY_APP_PORT: ${INVENTORY_APP_PORT}
    depends_on:
      inventory-db:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  billing-app:
    build:
      context: ./billing-app
      dockerfile: Dockerfile
    image: billing-app
    container_name: billing-app
    ports:
      - "8081:8081"
    environment:
      BILLING_DB_HOST: ${BILLING_DB_HOST}
      BILLING_DB_PORT: ${BILLING_DB_PORT}
      BILLING_DB_USER: ${BILLING_DB_USER}
      BILLING_DB_NAME: ${BILLING_DB_NAME}
      BILLING_APP_PORT: ${BILLING_APP_PORT}
      BILLING_DB_PASSWORD: ${BILLING_DB_PASSWORD}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_QUEUE_NAME: ${RABBITMQ_QUEUE_NAME}
    depends_on:
      billing-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  # api-gateway:
  #   build:
  #     context: ./api-gateway
  #     dockerfile: Dockerfile
  #   image: api-gateway
  #   container_name: api-gateway
  #   environment:
  #     API_GATEWAY_PORT: ${API_GATEWAY_PORT}
  #     INVENTORY_HOST: ${INVENTORY_DB_HOST}
  #     INVENTORY_PORT: ${INVENTORY_APP_PORT}
  #     RABBITMQ_HOST: ${RABBITMQ_HOST}
  #     RABBITMQ_PORT: ${RABBITMQ_PORT}
  #     RABBITMQ_USER: ${RABBITMQ_USER}
  #     RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
  #     RABBITMQ_QUEUE_NAME: ${RABBITMQ_QUEUE_NAME}
  #   ports:
  #     - "3000:3000"  # Only service accessible from host/client
  #   depends_on:
  #     inventory-app:
  #       condition: service_started
  #     rabbitmq-queue:
  #       condition: service_healthy
  #   volumes:
  #     - api-gateway-volume:/var/log/api-gateway  # Log persistence
  #   networks:
  #     - app-network
  #   restart: unless-stopped

volumes:
  inventory_data:
  billing_data:
  rabbitmq_data:
  rabbitmq_logs:
  # api-gateway:

networks:
  app-network:
    name: app-network
    driver: bridge